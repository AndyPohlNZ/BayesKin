rhat = NA,
ts_se = NA,
run_time = NA)
files = list.files(path = paste0(RESULTS_DIR, "DoubleLink_Mdl/Bayes_p3"))
seeds = as.numeric(gsub("(.+?)(\\_.*)", "\\1", files))
seeds = seeds[order(seeds)]
rowcnt = 1
for(i in 1:nfiles){
nlinks = 2
seed = seeds[i]
print(sprintf("Processing Double Link file %.0f of %.0f", i, nfiles))
# process LS results
lsmdl = readRDS(paste0(RESULTS_DIR, "DoubleLink_Mdl/LS/", seed, "_LSModel.rda"))
est = c(lsmdl$r.hat, lsmdl$theta.hat, lsmdl$sigma.hat)
int = lsmdl$intervals[1:(nlinks+2),]
results_double[rowcnt:(rowcnt+4), c('est')] = est
results_double[rowcnt:(rowcnt+3), c('quantile.1', 'quantile.5')] = int
results_double[rowcnt:(rowcnt+4), c('run_time')] = lsmdl$time
rowcnt = rowcnt + 5
# process Bayes P1
p1mdl =  readRDS(paste0(RESULTS_DIR, "DoubleLink_Mdl/Bayes_p1/", seed, "_BayesModel_p1.rda"))
p1sum = summary(p1mdl$fit)
results_double[rowcnt:(rowcnt+4),c('est', 'ts_se')] = p1sum$statistics[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'sigma'),c('Mean', 'Time-series SE')]
results_double[rowcnt:(rowcnt+4),c('quantile.1', 'quantile.2','quantile.3','quantile.4','quantile.5')] = p1sum$quantiles[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'sigma'),]
results_double[rowcnt:(rowcnt+4), c('neff')] = effectiveSize(p1mdl$fit)[c('r[1]', 'r[2]', 'theta[1]','theta[2]', 'sigma')]
results_double[rowcnt:(rowcnt+4), c('rhat')] = gelman.diag(p1mdl$fit)$psrf[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'sigma'), 1]
results_double[rowcnt:(rowcnt+4), c('run_time')] = p1mdl$time
rowcnt = rowcnt + 5
# process Bayes P2
p2mdl =  readRDS(paste0(RESULTS_DIR, "DoubleLink_Mdl/Bayes_p2/", seed, "_BayesModel_p2.rda"))
p2sum = summary(p2mdl$fit)
results_double[rowcnt:(rowcnt+4),c('est', 'ts_se')] = p2sum$statistics[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'sigma'),c('Mean', 'Time-series SE')]
results_double[rowcnt:(rowcnt+4),c('quantile.1', 'quantile.2','quantile.3','quantile.4','quantile.5')] = p2sum$quantiles[c('r[1]', 'r[2]', 'theta[1]','theta[2]', 'sigma'),]
results_double[rowcnt:(rowcnt+4), c('neff')] = effectiveSize(p2mdl$fit)[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'sigma')]
results_double[rowcnt:(rowcnt+4), c('rhat')] = gelman.diag(p2mdl$fit)$psrf[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'sigma'),1]
results_double[rowcnt:(rowcnt+4), c('run_time')] = p2mdl$time
rowcnt = rowcnt + 5
# process Bayes P3
p3mdl =  readRDS(paste0(RESULTS_DIR, "DoubleLink_Mdl/Bayes_p3/", seed, "_BayesModel_p3.rda"))
p3sum = summary(p3mdl$fit)
results_double[rowcnt:(rowcnt+4),c('est', 'ts_se')] = p3sum$statistics[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'sigma'),c('Mean', 'Time-series SE')]
results_double[rowcnt:(rowcnt+4),c('quantile.1', 'quantile.2','quantile.3','quantile.4','quantile.5')] = p3sum$quantiles[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'sigma'),]
results_double[rowcnt:(rowcnt+4), c('neff')] = effectiveSize(p3mdl$fit)[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'sigma')]
results_double[rowcnt:(rowcnt+4), c('rhat')] = gelman.diag(p3mdl$fit)$psrf[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'sigma'),1]
results_double[rowcnt:(rowcnt+4), c('run_time')] = p3mdl$time
rowcnt = rowcnt + 5
# process Bayes P4
p4mdl =  readRDS(paste0(RESULTS_DIR, "DoubleLink_Mdl/Bayes_p4/", seed, "_BayesModel_p4.rda"))
p4sum = summary(p4mdl$fit)
results_double[rowcnt:(rowcnt+4),c('est', 'ts_se')] = p4sum$statistics[c('r[1]', 'r[2]','theta[1]', 'theta[2]', 'sigma'),c('Mean', 'Time-series SE')]
results_double[rowcnt:(rowcnt+4),c('quantile.1', 'quantile.2','quantile.3','quantile.4','quantile.5')] = p4sum$quantiles[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'sigma'),]
results_double[rowcnt:(rowcnt+4), c('neff')] = effectiveSize(p4mdl$fit)[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]','sigma')]
results_double[rowcnt:(rowcnt+4), c('rhat')] = gelman.diag(p4mdl$fit)$psrf[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]','sigma'),1]
results_double[rowcnt:(rowcnt+4), c('run_time')] = p4mdl$time
rowcnt = rowcnt + 5
# process Bayes P5
p5mdl =  readRDS(paste0(RESULTS_DIR, "DoubleLink_Mdl/Bayes_p5/", seed, "_BayesModel_p5.rda"))
p5sum = summary(p5mdl$fit)
results_double[rowcnt:(rowcnt+4),c('est', 'ts_se')] = p5sum$statistics[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'sigma'),c('Mean', 'Time-series SE')]
results_double[rowcnt:(rowcnt+4),c('quantile.1', 'quantile.2','quantile.3','quantile.4','quantile.5')] = p5sum$quantiles[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'sigma'),]
results_double[rowcnt:(rowcnt+4), c('neff')] = effectiveSize(p5mdl$fit)[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'sigma')]
results_double[rowcnt:(rowcnt+4), c('rhat')] = gelman.diag(p5mdl$fit)$psrf[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'sigma'),1]
results_double[rowcnt:(rowcnt+4), c('run_time')] = p5mdl$time
rowcnt = rowcnt + 5
}
saveRDS(results_double, file = paste0(RESULTS_DIR, 'results/results_double_', format(Sys.time(), "%d%m%Y"),".rda"))
# preliminaries
rm(list = ls()) # clear workspace
library('rjags') # load rstan package to analysie rstan objects
library('coda') # load coda package for mcmc analysis
RESULTS_DIR = "/media/data/ActiveProjects/P01_BayesianKinematics/V5/src/" # location of results directory
POSE_DIRS = c("SingleLink_Mdl", "DoubleLink_Mdl", "TripleLink_Mdl")  # Folder names for the various model configurations
MODELS = c("LS", "Bayes_p1", "Bayes_p2", "Bayes_p3", "Bayes_p4", "Bayes_p5") # Names of Models used
file_ends = c('LSModel.rda', 'BayesModel_p1.rda', 'BayesModel_p2.rda', 'BayesModel_p3.rda', 'BayesModel_p4.rda', 'BayesModel_p5.rda')
PARMS = c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'theta[3]', 'sigma') # Parameters of interest
nfiles = 1200 # the number of results files to process
nmodels = length(MODELS)
################################################################################
# Triple Link
################################################################################
results_triple = data.frame(pose = rep('TripleLink', nmodels*6*nfiles),
seed = rep(1:nfiles, each = nmodels*6),
model = rep(rep(MODELS, each = 6),nfiles),
parameter = rep(c('r1', 'r2', 'theta1', 'theta2', 'theta3', 'sigma'), nfiles*nmodels),
est = NA,
quantile = matrix(NA, nfiles*6*nmodels, 5),
neff = NA,
rhat = NA,
ts_se = NA,
run_time = NA)
files = list.files(path = paste0(RESULTS_DIR, "TripleLink_Mdl/Bayes_p3"))
seeds = as.numeric(gsub("(.+?)(\\_.*)", "\\1", files))
seeds = seeds[order(seeds)]
rowcnt = 1
for(i in 1:nfiles){
nlinks = 3
seed = seeds[i]
print(sprintf("Processing Triple Link file %.0f of %.0f", i, nfiles))
# process LS results
lsmdl = readRDS(paste0(RESULTS_DIR, "TripleLink_Mdl/LS/", seed, "_LSModel.rda"))
est = c(lsmdl$r.hat, lsmdl$theta.hat, lsmdl$sigma.hat)
int = lsmdl$intervals[1:(nlinks+2),]
results_triple[rowcnt:(rowcnt+5), c('est')] = est
results_triple[rowcnt:(rowcnt+4), c('quantile.1', 'quantile.5')] = int
results_triple[rowcnt:(rowcnt+5), c('run_time')] = lsmdl$time
rowcnt = rowcnt + 6
# process Bayes P1
p1mdl =  readRDS(paste0(RESULTS_DIR, "TripleLink_Mdl/Bayes_p1/", seed, "_BayesModel_p1.rda"))
p1sum = summary(p1mdl$fit)
results_triple[rowcnt:(rowcnt+5),c('est', 'ts_se')] = p1sum$statistics[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'theta[3]', 'sigma'),c('Mean', 'Time-series SE')]
results_triple[rowcnt:(rowcnt+5),c('quantile.1', 'quantile.2','quantile.3','quantile.4','quantile.5')] = p1sum$quantiles[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'theta[3]', 'sigma'),]
results_triple[rowcnt:(rowcnt+5), c('neff')] = effectiveSize(p1mdl$fit)[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'theta[3]', 'sigma')]
results_triple[rowcnt:(rowcnt+5), c('rhat')] = gelman.diag(p1mdl$fit)$psrf[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'theta[3]', 'sigma'), 1]
results_triple[rowcnt:(rowcnt+5), c('run_time')] = p1mdl$time
rowcnt = rowcnt + 6
# process Bayes P2
p2mdl =  readRDS(paste0(RESULTS_DIR, "TripleLink_Mdl/Bayes_p2/", seed, "_BayesModel_p2.rda"))
p2sum = summary(p2mdl$fit)
results_triple[rowcnt:(rowcnt+5),c('est', 'ts_se')] = p2sum$statistics[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'theta[3]', 'sigma'),c('Mean', 'Time-series SE')]
results_triple[rowcnt:(rowcnt+5),c('quantile.1', 'quantile.2','quantile.3','quantile.4','quantile.5')] = p2sum$quantiles[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'theta[3]', 'sigma'),]
results_triple[rowcnt:(rowcnt+5), c('neff')] = effectiveSize(p2mdl$fit)[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'theta[3]', 'sigma')]
results_triple[rowcnt:(rowcnt+5), c('rhat')] = gelman.diag(p2mdl$fit)$psrf[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'theta[3]', 'sigma'),1]
results_triple[rowcnt:(rowcnt+5), c('run_time')] = p2mdl$time
rowcnt = rowcnt + 6
# process Bayes P2
p3mdl =  readRDS(paste0(RESULTS_DIR, "TripleLink_Mdl/Bayes_p3/", seed, "_BayesModel_p3.rda"))
p3sum = summary(p3mdl$fit)
results_triple[rowcnt:(rowcnt+5),c('est', 'ts_se')] = p3sum$statistics[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'theta[3]', 'sigma'),c('Mean', 'Time-series SE')]
results_triple[rowcnt:(rowcnt+5),c('quantile.1', 'quantile.2','quantile.3','quantile.4','quantile.5')] = p3sum$quantiles[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'theta[3]', 'sigma'),]
results_triple[rowcnt:(rowcnt+5), c('neff')] = effectiveSize(p3mdl$fit)[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'theta[3]', 'sigma')]
results_triple[rowcnt:(rowcnt+5), c('rhat')] = gelman.diag(p3mdl$fit)$psrf[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'theta[3]', 'sigma'),1]
results_triple[rowcnt:(rowcnt+5), c('run_time')] = p3mdl$time
rowcnt = rowcnt + 6
# process Bayes P4
p4mdl =  readRDS(paste0(RESULTS_DIR, "TripleLink_Mdl/Bayes_p4/", seed, "_BayesModel_p4.rda"))
p4sum = summary(p4mdl$fit)
results_triple[rowcnt:(rowcnt+5),c('est', 'ts_se')] = p4sum$statistics[c('r[1]', 'r[2]','theta[1]', 'theta[2]', 'theta[3]', 'sigma'),c('Mean', 'Time-series SE')]
results_triple[rowcnt:(rowcnt+5),c('quantile.1', 'quantile.2','quantile.3','quantile.4','quantile.5')] = p4sum$quantiles[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'theta[3]', 'sigma'),]
results_triple[rowcnt:(rowcnt+5), c('neff')] = effectiveSize(p4mdl$fit)[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'theta[3]','sigma')]
results_triple[rowcnt:(rowcnt+5), c('rhat')] = gelman.diag(p4mdl$fit)$psrf[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'theta[3]','sigma'),1]
results_triple[rowcnt:(rowcnt+5), c('run_time')] = p4mdl$time
rowcnt = rowcnt + 6
# process Bayes P5
p5mdl =  readRDS(paste0(RESULTS_DIR, "TripleLink_Mdl/Bayes_p5/", seed, "_BayesModel_p5.rda"))
p5sum = summary(p5mdl$fit)
results_triple[rowcnt:(rowcnt+5),c('est', 'ts_se')] = p5sum$statistics[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'theta[3]', 'sigma'),c('Mean', 'Time-series SE')]
results_triple[rowcnt:(rowcnt+5),c('quantile.1', 'quantile.2','quantile.3','quantile.4','quantile.5')] = p5sum$quantiles[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'theta[3]', 'sigma'),]
results_triple[rowcnt:(rowcnt+5), c('neff')] = effectiveSize(p5mdl$fit)[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'theta[3]', 'sigma')]
results_triple[rowcnt:(rowcnt+5), c('rhat')] = gelman.diag(p5mdl$fit)$psrf[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'theta[3]', 'sigma'),1]
results_triple[rowcnt:(rowcnt+5), c('run_time')] = p5mdl$time
rowcnt = rowcnt + 6
}
saveRDS(results_triple, file = paste0(RESULTS_DIR, 'results/results_triple_', format(Sys.time(), "%d%m%Y"),".rda"))
readRDS(paste0(RESULTS_DIR,"results_single_29032021.rda"))
RESULTS_DIR
readRDS(paste0(RESULTS_DIR,"results/", "results_single_29032021.rda"))
results_single = readRDS(paste0(RESULTS_DIR,"results/", "results_single_29032021.rda"))
results_double = readRDS(paste0(RESULTS_DIR, "results/", "results_double_29032021.rda"))
View(results_single)
results = rbind(results_single, results_double, results_triple)
print("Saving Results...")
saveRDS(results, file = paste0(RESULTS_DIR, 'results/results_', format(Sys.time(), "%d%m%Y"),".rda"))
write.table(results, file = paste0(RESULTS_DIR, 'results/results_', format(Sys.time(), "%d%m%Y"),".csv"), sep = ',', col.names = TRUE, row.names = FALSE)
print("Complete!")
########################### BayesKin ###########################
## Bayesian estimates of rigid body kinematics
## Andy Pohl
## UofC - Faculty of Kinesiology
################################################################
##################### generate_results.r  ###################
## processes_results table for a batch of simulations
#############################################################
# preliminaries
rm(list = ls()) # clear workspace
library('rjags') # load rstan package to analysie rstan objects
library('coda') # load coda package for mcmc analysis
RESULTS_DIR = "/media/data/ActiveProjects/P01_BayesianKinematics/V6/src/" # location of results directory
POSE_DIRS = c("SingleLink_Mdl", "DoubleLink_Mdl", "TripleLink_Mdl")  # Folder names for the various model configurations
MODELS = c("LS", "Bayes_p1", "Bayes_p2", "Bayes_p3", "Bayes_p4", "Bayes_p5") # Names of Models used
file_ends = c('LSModel.rda', 'BayesModel_p1.rda', 'BayesModel_p2.rda', 'BayesModel_p3.rda', 'BayesModel_p4.rda', 'BayesModel_p5.rda')
PARMS = c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'theta[3]', 'sigma') # Parameters of interest
nfiles = 1090 # the number of results files to process
nmodels = length(MODELS)
################################################################################
# Single Link
################################################################################
results_single = data.frame(pose = rep('SingleLink', nmodels*4*nfiles),
seed = rep(1:nfiles, each = nmodels*4),
model = rep(rep(MODELS, each = 4),nfiles),
parameter = rep(c('r1', 'r2', 'theta1', 'sigma'), nfiles*nmodels),
est = NA,
quantile = matrix(NA, nfiles*4*nmodels, 5),
neff = NA,
rhat = NA,
ts_se = NA,
run_time = NA)
files = list.files(path = paste0(RESULTS_DIR, "SingleLink_Mdl/Bayes_p3"))
seeds = as.numeric(gsub("(.+?)(\\_.*)", "\\1", files))
seeds = seeds[order(seeds)]
rowcnt = 1
for(i in 1:nfiles){
nlinks = 1
seed = seeds[i]
print(sprintf("Processing Single Link file %.0f of %.0f", i, nfiles))
# process LS results
lsmdl = readRDS(paste0(RESULTS_DIR, "SingleLink_Mdl/LS/", seed, "_LSModel.rda"))
est = c(lsmdl$r.hat, lsmdl$theta.hat, lsmdl$sigma.hat)
int = lsmdl$intervals[1:(nlinks+2),]
results_single[rowcnt:(rowcnt+3), c('est')] = est
results_single[rowcnt:(rowcnt+2), c('quantile.1', 'quantile.5')] = int
results_single[rowcnt:(rowcnt+3), c('run_time')] = lsmdl$time
rowcnt = rowcnt + 4
# process Bayes P1
p1mdl =  readRDS(paste0(RESULTS_DIR, "SingleLink_Mdl/Bayes_p1/", seed, "_BayesModel_p1.rda"))
p1sum = summary(p1mdl$fit)
results_single[rowcnt:(rowcnt+3),c('est', 'ts_se')] = p1sum$statistics[c('r[1]', 'r[2]', 'theta', 'sigma'),c('Mean', 'Time-series SE')]
results_single[rowcnt:(rowcnt+3),c('quantile.1', 'quantile.2','quantile.3','quantile.4','quantile.5')] = p1sum$quantiles[c('r[1]', 'r[2]', 'theta', 'sigma'),]
results_single[rowcnt:(rowcnt+3), c('neff')] = effectiveSize(p1mdl$fit)[c('r[1]', 'r[2]', 'theta', 'sigma')]
results_single[rowcnt:(rowcnt+3), c('rhat')] = gelman.diag(p1mdl$fit)$psrf[c('r[1]', 'r[2]', 'theta', 'sigma'),1]
results_single[rowcnt:(rowcnt+3), c('run_time')] = p1mdl$time
rowcnt = rowcnt + 4
# process Bayes P2
p2mdl =  readRDS(paste0(RESULTS_DIR, "SingleLink_Mdl/Bayes_p2/", seed, "_BayesModel_p2.rda"))
p2sum = summary(p2mdl$fit)
results_single[rowcnt:(rowcnt+3),c('est', 'ts_se')] = p2sum$statistics[c('r[1]', 'r[2]', 'theta', 'sigma'),c('Mean', 'Time-series SE')]
results_single[rowcnt:(rowcnt+3),c('quantile.1', 'quantile.2','quantile.3','quantile.4','quantile.5')] = p2sum$quantiles[c('r[1]', 'r[2]', 'theta', 'sigma'),]
results_single[rowcnt:(rowcnt+3), c('neff')] = effectiveSize(p2mdl$fit)[c('r[1]', 'r[2]', 'theta', 'sigma')]
results_single[rowcnt:(rowcnt+3), c('rhat')] = gelman.diag(p2mdl$fit)$psrf[c('r[1]', 'r[2]', 'theta', 'sigma'),1]
results_single[rowcnt:(rowcnt+3), c('run_time')] = p2mdl$time
rowcnt = rowcnt + 4
# process Bayes P3
p3mdl =  readRDS(paste0(RESULTS_DIR, "SingleLink_Mdl/Bayes_p3/", seed, "_BayesModel_p3.rda"))
p3sum = summary(p3mdl$fit)
results_single[rowcnt:(rowcnt+3),c('est', 'ts_se')] = p3sum$statistics[c('r[1]', 'r[2]', 'theta[1]', 'sigma'),c('Mean', 'Time-series SE')]
results_single[rowcnt:(rowcnt+3),c('quantile.1', 'quantile.2','quantile.3','quantile.4','quantile.5')] = p3sum$quantiles[c('r[1]', 'r[2]', 'theta[1]', 'sigma'),]
results_single[rowcnt:(rowcnt+3), c('neff')] = effectiveSize(p3mdl$fit)[c('r[1]', 'r[2]', 'theta[1]', 'sigma')]
results_single[rowcnt:(rowcnt+3), c('rhat')] = gelman.diag(p3mdl$fit)$psrf[c('r[1]', 'r[2]', 'theta[1]', 'sigma'),1]
results_single[rowcnt:(rowcnt+3), c('run_time')] = p3mdl$time
rowcnt = rowcnt + 4
# process Bayes P4
p4mdl =  readRDS(paste0(RESULTS_DIR, "SingleLink_Mdl/Bayes_p4/", seed, "_BayesModel_p4.rda"))
p4sum = summary(p4mdl$fit)
results_single[rowcnt:(rowcnt+3),c('est', 'ts_se')] = p4sum$statistics[c('r[1]', 'r[2]', 'theta', 'sigma'),c('Mean', 'Time-series SE')]
results_single[rowcnt:(rowcnt+3),c('quantile.1', 'quantile.2','quantile.3','quantile.4','quantile.5')] = p4sum$quantiles[c('r[1]', 'r[2]', 'theta', 'sigma'),]
results_single[rowcnt:(rowcnt+3), c('neff')] = effectiveSize(p4mdl$fit)[c('r[1]', 'r[2]', 'theta', 'sigma')]
results_single[rowcnt:(rowcnt+3), c('rhat')] = gelman.diag(p4mdl$fit)$psrf[c('r[1]', 'r[2]', 'theta', 'sigma'),1]
results_single[rowcnt:(rowcnt+3), c('run_time')] = p4mdl$time
rowcnt = rowcnt + 4
# process Bayes P5
p5mdl =  readRDS(paste0(RESULTS_DIR, "SingleLink_Mdl/Bayes_p5/", seed, "_BayesModel_p5.rda"))
p5sum = summary(p5mdl$fit)
results_single[rowcnt:(rowcnt+3),c('est', 'ts_se')] = p5sum$statistics[c('r[1]', 'r[2]', 'theta', 'sigma'),c('Mean', 'Time-series SE')]
results_single[rowcnt:(rowcnt+3),c('quantile.1', 'quantile.2','quantile.3','quantile.4','quantile.5')] = p5sum$quantiles[c('r[1]', 'r[2]', 'theta', 'sigma'),]
results_single[rowcnt:(rowcnt+3), c('neff')] = effectiveSize(p5mdl$fit)[c('r[1]', 'r[2]', 'theta', 'sigma')]
results_single[rowcnt:(rowcnt+3), c('rhat')] = gelman.diag(p5mdl$fit)$psrf[c('r[1]', 'r[2]', 'theta', 'sigma'),1]
results_single[rowcnt:(rowcnt+3), c('run_time')] = p5mdl$time
rowcnt = rowcnt + 4
}
saveRDS(results_single, file = paste0(RESULTS_DIR, 'results/results_single_', format(Sys.time(), "%d%m%Y"),".rda"))
################################################################################
# Double Link
################################################################################
results_double = data.frame(pose = rep('DoubleLink', nmodels*5*nfiles),
seed = rep(1:nfiles, each = nmodels*5),
model = rep(rep(MODELS, each = 5),nfiles),
parameter = rep(c('r1', 'r2', 'theta1', 'theta2', 'sigma'), nfiles*nmodels),
est = NA,
quantile = matrix(NA, nfiles*5*nmodels, 5),
neff = NA,
rhat = NA,
ts_se = NA,
run_time = NA)
files = list.files(path = paste0(RESULTS_DIR, "DoubleLink_Mdl/Bayes_p3"))
seeds = as.numeric(gsub("(.+?)(\\_.*)", "\\1", files))
seeds = seeds[order(seeds)]
rowcnt = 1
for(i in 1:nfiles){
nlinks = 2
seed = seeds[i]
print(sprintf("Processing Double Link file %.0f of %.0f", i, nfiles))
# process LS results
lsmdl = readRDS(paste0(RESULTS_DIR, "DoubleLink_Mdl/LS/", seed, "_LSModel.rda"))
est = c(lsmdl$r.hat, lsmdl$theta.hat, lsmdl$sigma.hat)
int = lsmdl$intervals[1:(nlinks+2),]
results_double[rowcnt:(rowcnt+4), c('est')] = est
results_double[rowcnt:(rowcnt+3), c('quantile.1', 'quantile.5')] = int
results_double[rowcnt:(rowcnt+4), c('run_time')] = lsmdl$time
rowcnt = rowcnt + 5
# process Bayes P1
p1mdl =  readRDS(paste0(RESULTS_DIR, "DoubleLink_Mdl/Bayes_p1/", seed, "_BayesModel_p1.rda"))
p1sum = summary(p1mdl$fit)
results_double[rowcnt:(rowcnt+4),c('est', 'ts_se')] = p1sum$statistics[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'sigma'),c('Mean', 'Time-series SE')]
results_double[rowcnt:(rowcnt+4),c('quantile.1', 'quantile.2','quantile.3','quantile.4','quantile.5')] = p1sum$quantiles[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'sigma'),]
results_double[rowcnt:(rowcnt+4), c('neff')] = effectiveSize(p1mdl$fit)[c('r[1]', 'r[2]', 'theta[1]','theta[2]', 'sigma')]
results_double[rowcnt:(rowcnt+4), c('rhat')] = gelman.diag(p1mdl$fit)$psrf[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'sigma'), 1]
results_double[rowcnt:(rowcnt+4), c('run_time')] = p1mdl$time
rowcnt = rowcnt + 5
# process Bayes P2
p2mdl =  readRDS(paste0(RESULTS_DIR, "DoubleLink_Mdl/Bayes_p2/", seed, "_BayesModel_p2.rda"))
p2sum = summary(p2mdl$fit)
results_double[rowcnt:(rowcnt+4),c('est', 'ts_se')] = p2sum$statistics[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'sigma'),c('Mean', 'Time-series SE')]
results_double[rowcnt:(rowcnt+4),c('quantile.1', 'quantile.2','quantile.3','quantile.4','quantile.5')] = p2sum$quantiles[c('r[1]', 'r[2]', 'theta[1]','theta[2]', 'sigma'),]
results_double[rowcnt:(rowcnt+4), c('neff')] = effectiveSize(p2mdl$fit)[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'sigma')]
results_double[rowcnt:(rowcnt+4), c('rhat')] = gelman.diag(p2mdl$fit)$psrf[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'sigma'),1]
results_double[rowcnt:(rowcnt+4), c('run_time')] = p2mdl$time
rowcnt = rowcnt + 5
# process Bayes P3
p3mdl =  readRDS(paste0(RESULTS_DIR, "DoubleLink_Mdl/Bayes_p3/", seed, "_BayesModel_p3.rda"))
p3sum = summary(p3mdl$fit)
results_double[rowcnt:(rowcnt+4),c('est', 'ts_se')] = p3sum$statistics[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'sigma'),c('Mean', 'Time-series SE')]
results_double[rowcnt:(rowcnt+4),c('quantile.1', 'quantile.2','quantile.3','quantile.4','quantile.5')] = p3sum$quantiles[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'sigma'),]
results_double[rowcnt:(rowcnt+4), c('neff')] = effectiveSize(p3mdl$fit)[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'sigma')]
results_double[rowcnt:(rowcnt+4), c('rhat')] = gelman.diag(p3mdl$fit)$psrf[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'sigma'),1]
results_double[rowcnt:(rowcnt+4), c('run_time')] = p3mdl$time
rowcnt = rowcnt + 5
# process Bayes P4
p4mdl =  readRDS(paste0(RESULTS_DIR, "DoubleLink_Mdl/Bayes_p4/", seed, "_BayesModel_p4.rda"))
p4sum = summary(p4mdl$fit)
results_double[rowcnt:(rowcnt+4),c('est', 'ts_se')] = p4sum$statistics[c('r[1]', 'r[2]','theta[1]', 'theta[2]', 'sigma'),c('Mean', 'Time-series SE')]
results_double[rowcnt:(rowcnt+4),c('quantile.1', 'quantile.2','quantile.3','quantile.4','quantile.5')] = p4sum$quantiles[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'sigma'),]
results_double[rowcnt:(rowcnt+4), c('neff')] = effectiveSize(p4mdl$fit)[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]','sigma')]
results_double[rowcnt:(rowcnt+4), c('rhat')] = gelman.diag(p4mdl$fit)$psrf[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]','sigma'),1]
results_double[rowcnt:(rowcnt+4), c('run_time')] = p4mdl$time
rowcnt = rowcnt + 5
# process Bayes P5
p5mdl =  readRDS(paste0(RESULTS_DIR, "DoubleLink_Mdl/Bayes_p5/", seed, "_BayesModel_p5.rda"))
p5sum = summary(p5mdl$fit)
results_double[rowcnt:(rowcnt+4),c('est', 'ts_se')] = p5sum$statistics[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'sigma'),c('Mean', 'Time-series SE')]
results_double[rowcnt:(rowcnt+4),c('quantile.1', 'quantile.2','quantile.3','quantile.4','quantile.5')] = p5sum$quantiles[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'sigma'),]
results_double[rowcnt:(rowcnt+4), c('neff')] = effectiveSize(p5mdl$fit)[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'sigma')]
results_double[rowcnt:(rowcnt+4), c('rhat')] = gelman.diag(p5mdl$fit)$psrf[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'sigma'),1]
results_double[rowcnt:(rowcnt+4), c('run_time')] = p5mdl$time
rowcnt = rowcnt + 5
}
saveRDS(results_double, file = paste0(RESULTS_DIR, 'results/results_double_', format(Sys.time(), "%d%m%Y"),".rda"))
################################################################################
# Triple Link
################################################################################
results_triple = data.frame(pose = rep('TripleLink', nmodels*6*nfiles),
seed = rep(1:nfiles, each = nmodels*6),
model = rep(rep(MODELS, each = 6),nfiles),
parameter = rep(c('r1', 'r2', 'theta1', 'theta2', 'theta3', 'sigma'), nfiles*nmodels),
est = NA,
quantile = matrix(NA, nfiles*6*nmodels, 5),
neff = NA,
rhat = NA,
ts_se = NA,
run_time = NA)
files = list.files(path = paste0(RESULTS_DIR, "TripleLink_Mdl/Bayes_p3"))
seeds = as.numeric(gsub("(.+?)(\\_.*)", "\\1", files))
seeds = seeds[order(seeds)]
rowcnt = 1
for(i in 1:nfiles){
nlinks = 3
seed = seeds[i]
print(sprintf("Processing Triple Link file %.0f of %.0f", i, nfiles))
# process LS results
lsmdl = readRDS(paste0(RESULTS_DIR, "TripleLink_Mdl/LS/", seed, "_LSModel.rda"))
est = c(lsmdl$r.hat, lsmdl$theta.hat, lsmdl$sigma.hat)
int = lsmdl$intervals[1:(nlinks+2),]
results_triple[rowcnt:(rowcnt+5), c('est')] = est
results_triple[rowcnt:(rowcnt+4), c('quantile.1', 'quantile.5')] = int
results_triple[rowcnt:(rowcnt+5), c('run_time')] = lsmdl$time
rowcnt = rowcnt + 6
# process Bayes P1
p1mdl =  readRDS(paste0(RESULTS_DIR, "TripleLink_Mdl/Bayes_p1/", seed, "_BayesModel_p1.rda"))
p1sum = summary(p1mdl$fit)
results_triple[rowcnt:(rowcnt+5),c('est', 'ts_se')] = p1sum$statistics[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'theta[3]', 'sigma'),c('Mean', 'Time-series SE')]
results_triple[rowcnt:(rowcnt+5),c('quantile.1', 'quantile.2','quantile.3','quantile.4','quantile.5')] = p1sum$quantiles[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'theta[3]', 'sigma'),]
results_triple[rowcnt:(rowcnt+5), c('neff')] = effectiveSize(p1mdl$fit)[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'theta[3]', 'sigma')]
results_triple[rowcnt:(rowcnt+5), c('rhat')] = gelman.diag(p1mdl$fit)$psrf[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'theta[3]', 'sigma'), 1]
results_triple[rowcnt:(rowcnt+5), c('run_time')] = p1mdl$time
rowcnt = rowcnt + 6
# process Bayes P2
p2mdl =  readRDS(paste0(RESULTS_DIR, "TripleLink_Mdl/Bayes_p2/", seed, "_BayesModel_p2.rda"))
p2sum = summary(p2mdl$fit)
results_triple[rowcnt:(rowcnt+5),c('est', 'ts_se')] = p2sum$statistics[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'theta[3]', 'sigma'),c('Mean', 'Time-series SE')]
results_triple[rowcnt:(rowcnt+5),c('quantile.1', 'quantile.2','quantile.3','quantile.4','quantile.5')] = p2sum$quantiles[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'theta[3]', 'sigma'),]
results_triple[rowcnt:(rowcnt+5), c('neff')] = effectiveSize(p2mdl$fit)[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'theta[3]', 'sigma')]
results_triple[rowcnt:(rowcnt+5), c('rhat')] = gelman.diag(p2mdl$fit)$psrf[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'theta[3]', 'sigma'),1]
results_triple[rowcnt:(rowcnt+5), c('run_time')] = p2mdl$time
rowcnt = rowcnt + 6
# process Bayes P2
p3mdl =  readRDS(paste0(RESULTS_DIR, "TripleLink_Mdl/Bayes_p3/", seed, "_BayesModel_p3.rda"))
p3sum = summary(p3mdl$fit)
results_triple[rowcnt:(rowcnt+5),c('est', 'ts_se')] = p3sum$statistics[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'theta[3]', 'sigma'),c('Mean', 'Time-series SE')]
results_triple[rowcnt:(rowcnt+5),c('quantile.1', 'quantile.2','quantile.3','quantile.4','quantile.5')] = p3sum$quantiles[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'theta[3]', 'sigma'),]
results_triple[rowcnt:(rowcnt+5), c('neff')] = effectiveSize(p3mdl$fit)[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'theta[3]', 'sigma')]
results_triple[rowcnt:(rowcnt+5), c('rhat')] = gelman.diag(p3mdl$fit)$psrf[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'theta[3]', 'sigma'),1]
results_triple[rowcnt:(rowcnt+5), c('run_time')] = p3mdl$time
rowcnt = rowcnt + 6
# process Bayes P4
p4mdl =  readRDS(paste0(RESULTS_DIR, "TripleLink_Mdl/Bayes_p4/", seed, "_BayesModel_p4.rda"))
p4sum = summary(p4mdl$fit)
results_triple[rowcnt:(rowcnt+5),c('est', 'ts_se')] = p4sum$statistics[c('r[1]', 'r[2]','theta[1]', 'theta[2]', 'theta[3]', 'sigma'),c('Mean', 'Time-series SE')]
results_triple[rowcnt:(rowcnt+5),c('quantile.1', 'quantile.2','quantile.3','quantile.4','quantile.5')] = p4sum$quantiles[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'theta[3]', 'sigma'),]
results_triple[rowcnt:(rowcnt+5), c('neff')] = effectiveSize(p4mdl$fit)[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'theta[3]','sigma')]
results_triple[rowcnt:(rowcnt+5), c('rhat')] = gelman.diag(p4mdl$fit)$psrf[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'theta[3]','sigma'),1]
results_triple[rowcnt:(rowcnt+5), c('run_time')] = p4mdl$time
rowcnt = rowcnt + 6
# process Bayes P5
p5mdl =  readRDS(paste0(RESULTS_DIR, "TripleLink_Mdl/Bayes_p5/", seed, "_BayesModel_p5.rda"))
p5sum = summary(p5mdl$fit)
results_triple[rowcnt:(rowcnt+5),c('est', 'ts_se')] = p5sum$statistics[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'theta[3]', 'sigma'),c('Mean', 'Time-series SE')]
results_triple[rowcnt:(rowcnt+5),c('quantile.1', 'quantile.2','quantile.3','quantile.4','quantile.5')] = p5sum$quantiles[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'theta[3]', 'sigma'),]
results_triple[rowcnt:(rowcnt+5), c('neff')] = effectiveSize(p5mdl$fit)[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'theta[3]', 'sigma')]
results_triple[rowcnt:(rowcnt+5), c('rhat')] = gelman.diag(p5mdl$fit)$psrf[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'theta[3]', 'sigma'),1]
results_triple[rowcnt:(rowcnt+5), c('run_time')] = p5mdl$time
rowcnt = rowcnt + 6
}
saveRDS(results_triple, file = paste0(RESULTS_DIR, 'results/results_triple_', format(Sys.time(), "%d%m%Y"),".rda"))
################################################################################
# Combine and save
################################################################################
print("Combing files")
results_single = readRDS(paste0(RESULTS_DIR,"results/", "results_single_29032021.rda"))
results_double = readRDS(paste0(RESULTS_DIR, "results/", "results_double_29032021.rda"))
results_triple= readRDS(paste0(RESULTS_DIR, "results/", "results_triple_31032021.rda"))
results = rbind(results_single, results_double, results_triple)
print("Saving Results...")
saveRDS(results, file = paste0(RESULTS_DIR, 'results/results_', format(Sys.time(), "%d%m%Y"),".rda"))
write.table(results, file = paste0(RESULTS_DIR, 'results/results_', format(Sys.time(), "%d%m%Y"),".csv"), sep = ',', col.names = TRUE, row.names = FALSE)
print("Complete!")
saveRDS(results, file = paste0(RESULTS_DIR, 'results/results_', format(Sys.time(), "%d%m%Y"),".rda"))
write.table(results, file = paste0(RESULTS_DIR, 'results/results_', format(Sys.time(), "%d%m%Y"),".csv"), sep = ',', col.names = TRUE, row.names = FALSE)
print("Complete!")
saveRDS(results_triple, file = paste0(RESULTS_DIR, 'results/results_triple_', format(Sys.time(), "%d%m%Y"),".rda"))
saveRDS(results_double, file = paste0(RESULTS_DIR, 'results/results_double_', format(Sys.time(), "%d%m%Y"),".rda"))
saveRDS(results_single, file = paste0(RESULTS_DIR, 'results/results_single_', format(Sys.time(), "%d%m%Y"),".rda"))
View(results)
738+293+96+351+161+57+79+290+1307+148
25*.33333
25*.24
2+1.5+4.5+4+8
25*.5
2+1.5+4.5+4+10
34-22
7+17.5+10+15
44-5
15+9
31.5 + (2*6.75)
temp = runif(10000,0,1)
plot(density(temp))
plot(density(log(temp)))
temp = runif(1000000,0,10)
plot(density(temp))
plot(density(log(temp)))
temp = runif(1000000,0,10)
plot(density(temp))
plot(density(log(temp)))
# preliminaries
rm(list = ls()) # clear workspace
library('dplyr')
library('tidyr')
library('latex2exp')
library('xtable')
library('ggplot2')
library('coda')
RESULTS_DIR = "/media/data/ActiveProjects/P01_BayesianKinematics/PublishedCode/BayesKin/src" # location of results directory
setwd(RESULTS_DIR)
#####################################################################################
## Plot likelihoods
#####################################################################################
source('./library.r')
set.seed(4)
## 1) Specify parameters
n.links = 3               # Number of links.
seg.length = c(0.45, 0.35, 0.25)         # Length of segment specified in m. NB: Pataky pg 2.
r_true = c(0.07, 0.03)      # Origin location in m.
theta_true = c(-55, -110, -10)          # Rotation angle in deg. NB: specified to avoid 0/360 issue
# and mirroring solutions.
sigma_true = 1.5/1000       # Measurement noise in m. NB Noise specified as 1.5mm
# midpoint of range explored by Pataky et al.
true_vals = c(r_true = r_true, theta_true = theta_true, sigma_true = sigma_true)
# Generate posture
links = list(gen_link(seg.length = seg.length[1],
plate.center = 0.7*seg.length[1]),
gen_link(seg.length = seg.length[2],
plate.center = 0.5*seg.length[2]),
gen_link(seg.length = seg.length[3],
plate.center = 0.5*seg.length[3]))
posture = gen_posture(links, r = r_true, theta = theta_true)
y = gen_obs(posture, sigma_true)
LS_result = LS_soln(y, links,
inits = true_vals,
init_type = 'random' )
inits = c(0.0446749866008758, 0.012961977859959, -40.1004006620497, 88.534386176616, 142.351554371417)
# lik for theta 2 vs 3
thetasi = seq(-135, 135, length.out = 500)
thetasj = seq(-45, 270, length.out = 500)
costs = matrix(NA, nrow = length(thetasi), ncol = length(thetasj))
for(i in 1:length(thetasi)){
for(j in 1:length(thetasj)){
costs[i,j] = cost(params = c(true_vals[1:3], thetasi[i], thetasj[j]), y=y, links = links)
}
}
filled.contour(x=thetasi, y = thetasj, z=costs,
color = function(n) rev(hcl.colors(n, "Spectral")),
main = "Marginal Likelihood", xlab = TeX('$\\theta_2$'), ylab = TeX('$\\theta_3$'), nlevels = 30,
plot.axes={points(true_vals[4], true_vals[5], pch = 19, col = rgb(241/255, 136/255,5/255, 1))
points(LS_result$theta.hat[2], LS_result$theta.hat[3], pch = 19, col = rgb(217/255, 3/255, 104/255, 1))
points(inits[4], inits[5], pch = 19, col = 'black')
axis(1, seq(-135, 135, by = 45))
axis(2, seq(-45, 270, by = 45))})
filled.contour(x=thetasi, y = thetasj, z=costs,
color = function(n) rev(hcl.colors(n, "Spectral")),
main = "LS Cost", xlab = TeX('$\\theta_2$'), ylab = TeX('$\\theta_3$'), nlevels = 30,
plot.axes={points(true_vals[4], true_vals[5], pch = 19, col = rgb(241/255, 136/255,5/255, 1))
points(LS_result$theta.hat[2], LS_result$theta.hat[3], pch = 19, col = rgb(217/255, 3/255, 104/255, 1))
points(inits[4], inits[5], pch = 19, col = 'black')
axis(1, seq(-135, 135, by = 45))
axis(2, seq(-45, 270, by = 45))})
