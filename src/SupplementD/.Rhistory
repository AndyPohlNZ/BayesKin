results_single[rowcnt:(rowcnt+3),c('quantile.1', 'quantile.2','quantile.3','quantile.4','quantile.5')] = p5sum$quantiles[c('r[1]', 'r[2]', 'theta', 'sigma'),]
results_single[rowcnt:(rowcnt+3), c('neff')] = effectiveSize(p5mdl$fit)[c('r[1]', 'r[2]', 'theta', 'sigma')]
results_single[rowcnt:(rowcnt+3), c('rhat')] = gelman.diag(p5mdl$fit)$psrf[c('r[1]', 'r[2]', 'theta', 'sigma'),1]
results_single[rowcnt:(rowcnt+3), c('run_time')] = p5mdl$time
rowcnt = rowcnt + 4
}
saveRDS(results_single, file = paste0(RESULTS_DIR, 'results/results_single_', format(Sys.time(), "%d%m%Y"),".rda"))
################################################################################
# Double Link
################################################################################
results_double = data.frame(pose = rep('DoubleLink', nmodels*5*nfiles),
seed = rep(1:nfiles, each = nmodels*5),
model = rep(rep(MODELS, each = 5),nfiles),
parameter = rep(c('r1', 'r2', 'theta1', 'theta2', 'sigma'), nfiles*nmodels),
est = NA,
quantile = matrix(NA, nfiles*5*nmodels, 5),
neff = NA,
rhat = NA,
ts_se = NA,
run_time = NA)
files = list.files(path = paste0(RESULTS_DIR, "DoubleLink_Mdl/Bayes_p3"))
seeds = as.numeric(gsub("(.+?)(\\_.*)", "\\1", files))
seeds = seeds[order(seeds)]
rowcnt = 1
for(i in 1:nfiles){
nlinks = 2
seed = seeds[i]
print(sprintf("Processing Double Link file %.0f of %.0f", i, nfiles))
# process LS results
lsmdl = readRDS(paste0(RESULTS_DIR, "DoubleLink_Mdl/LS/", seed, "_LSModel.rda"))
est = c(lsmdl$r.hat, lsmdl$theta.hat, lsmdl$sigma.hat)
int = lsmdl$intervals[1:(nlinks+2),]
results_double[rowcnt:(rowcnt+4), c('est')] = est
results_double[rowcnt:(rowcnt+3), c('quantile.1', 'quantile.5')] = int
results_double[rowcnt:(rowcnt+4), c('run_time')] = lsmdl$time
rowcnt = rowcnt + 5
# process Bayes P1
p1mdl =  readRDS(paste0(RESULTS_DIR, "DoubleLink_Mdl/Bayes_p1/", seed, "_BayesModel_p1.rda"))
p1sum = summary(p1mdl$fit)
results_double[rowcnt:(rowcnt+4),c('est', 'ts_se')] = p1sum$statistics[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'sigma'),c('Mean', 'Time-series SE')]
results_double[rowcnt:(rowcnt+4),c('quantile.1', 'quantile.2','quantile.3','quantile.4','quantile.5')] = p1sum$quantiles[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'sigma'),]
results_double[rowcnt:(rowcnt+4), c('neff')] = effectiveSize(p1mdl$fit)[c('r[1]', 'r[2]', 'theta[1]','theta[2]', 'sigma')]
results_double[rowcnt:(rowcnt+4), c('rhat')] = gelman.diag(p1mdl$fit)$psrf[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'sigma'), 1]
results_double[rowcnt:(rowcnt+4), c('run_time')] = p1mdl$time
rowcnt = rowcnt + 5
# process Bayes P2
p2mdl =  readRDS(paste0(RESULTS_DIR, "DoubleLink_Mdl/Bayes_p2/", seed, "_BayesModel_p2.rda"))
p2sum = summary(p2mdl$fit)
results_double[rowcnt:(rowcnt+4),c('est', 'ts_se')] = p2sum$statistics[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'sigma'),c('Mean', 'Time-series SE')]
results_double[rowcnt:(rowcnt+4),c('quantile.1', 'quantile.2','quantile.3','quantile.4','quantile.5')] = p2sum$quantiles[c('r[1]', 'r[2]', 'theta[1]','theta[2]', 'sigma'),]
results_double[rowcnt:(rowcnt+4), c('neff')] = effectiveSize(p2mdl$fit)[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'sigma')]
results_double[rowcnt:(rowcnt+4), c('rhat')] = gelman.diag(p2mdl$fit)$psrf[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'sigma'),1]
results_double[rowcnt:(rowcnt+4), c('run_time')] = p2mdl$time
rowcnt = rowcnt + 5
# process Bayes P3
p3mdl =  readRDS(paste0(RESULTS_DIR, "DoubleLink_Mdl/Bayes_p3/", seed, "_BayesModel_p3.rda"))
p3sum = summary(p3mdl$fit)
results_double[rowcnt:(rowcnt+4),c('est', 'ts_se')] = p3sum$statistics[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'sigma'),c('Mean', 'Time-series SE')]
results_double[rowcnt:(rowcnt+4),c('quantile.1', 'quantile.2','quantile.3','quantile.4','quantile.5')] = p3sum$quantiles[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'sigma'),]
results_double[rowcnt:(rowcnt+4), c('neff')] = effectiveSize(p3mdl$fit)[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'sigma')]
results_double[rowcnt:(rowcnt+4), c('rhat')] = gelman.diag(p3mdl$fit)$psrf[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'sigma'),1]
results_double[rowcnt:(rowcnt+4), c('run_time')] = p3mdl$time
rowcnt = rowcnt + 5
# process Bayes P4
p4mdl =  readRDS(paste0(RESULTS_DIR, "DoubleLink_Mdl/Bayes_p4/", seed, "_BayesModel_p4.rda"))
p4sum = summary(p4mdl$fit)
results_double[rowcnt:(rowcnt+4),c('est', 'ts_se')] = p4sum$statistics[c('r[1]', 'r[2]','theta[1]', 'theta[2]', 'sigma'),c('Mean', 'Time-series SE')]
results_double[rowcnt:(rowcnt+4),c('quantile.1', 'quantile.2','quantile.3','quantile.4','quantile.5')] = p4sum$quantiles[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'sigma'),]
results_double[rowcnt:(rowcnt+4), c('neff')] = effectiveSize(p4mdl$fit)[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]','sigma')]
results_double[rowcnt:(rowcnt+4), c('rhat')] = gelman.diag(p4mdl$fit)$psrf[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]','sigma'),1]
results_double[rowcnt:(rowcnt+4), c('run_time')] = p4mdl$time
rowcnt = rowcnt + 5
# process Bayes P5
p5mdl =  readRDS(paste0(RESULTS_DIR, "DoubleLink_Mdl/Bayes_p5/", seed, "_BayesModel_p5.rda"))
p5sum = summary(p5mdl$fit)
results_double[rowcnt:(rowcnt+4),c('est', 'ts_se')] = p5sum$statistics[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'sigma'),c('Mean', 'Time-series SE')]
results_double[rowcnt:(rowcnt+4),c('quantile.1', 'quantile.2','quantile.3','quantile.4','quantile.5')] = p5sum$quantiles[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'sigma'),]
results_double[rowcnt:(rowcnt+4), c('neff')] = effectiveSize(p5mdl$fit)[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'sigma')]
results_double[rowcnt:(rowcnt+4), c('rhat')] = gelman.diag(p5mdl$fit)$psrf[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'sigma'),1]
results_double[rowcnt:(rowcnt+4), c('run_time')] = p5mdl$time
rowcnt = rowcnt + 5
}
saveRDS(results_double, file = paste0(RESULTS_DIR, 'results/results_double_', format(Sys.time(), "%d%m%Y"),".rda"))
################################################################################
# Triple Link
################################################################################
results_triple = data.frame(pose = rep('TripleLink', nmodels*6*nfiles),
seed = rep(1:nfiles, each = nmodels*6),
model = rep(rep(MODELS, each = 6),nfiles),
parameter = rep(c('r1', 'r2', 'theta1', 'theta2', 'theta3', 'sigma'), nfiles*nmodels),
est = NA,
quantile = matrix(NA, nfiles*6*nmodels, 5),
neff = NA,
rhat = NA,
ts_se = NA,
run_time = NA)
files = list.files(path = paste0(RESULTS_DIR, "TripleLink_Mdl/Bayes_p3"))
seeds = as.numeric(gsub("(.+?)(\\_.*)", "\\1", files))
seeds = seeds[order(seeds)]
rowcnt = 1
for(i in 1:nfiles){
nlinks = 3
seed = seeds[i]
print(sprintf("Processing Triple Link file %.0f of %.0f", i, nfiles))
# process LS results
lsmdl = readRDS(paste0(RESULTS_DIR, "TripleLink_Mdl/LS/", seed, "_LSModel.rda"))
est = c(lsmdl$r.hat, lsmdl$theta.hat, lsmdl$sigma.hat)
int = lsmdl$intervals[1:(nlinks+2),]
results_triple[rowcnt:(rowcnt+5), c('est')] = est
results_triple[rowcnt:(rowcnt+4), c('quantile.1', 'quantile.5')] = int
results_triple[rowcnt:(rowcnt+5), c('run_time')] = lsmdl$time
rowcnt = rowcnt + 6
# process Bayes P1
p1mdl =  readRDS(paste0(RESULTS_DIR, "TripleLink_Mdl/Bayes_p1/", seed, "_BayesModel_p1.rda"))
p1sum = summary(p1mdl$fit)
results_triple[rowcnt:(rowcnt+5),c('est', 'ts_se')] = p1sum$statistics[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'theta[3]', 'sigma'),c('Mean', 'Time-series SE')]
results_triple[rowcnt:(rowcnt+5),c('quantile.1', 'quantile.2','quantile.3','quantile.4','quantile.5')] = p1sum$quantiles[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'theta[3]', 'sigma'),]
results_triple[rowcnt:(rowcnt+5), c('neff')] = effectiveSize(p1mdl$fit)[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'theta[3]', 'sigma')]
results_triple[rowcnt:(rowcnt+5), c('rhat')] = gelman.diag(p1mdl$fit)$psrf[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'theta[3]', 'sigma'), 1]
results_triple[rowcnt:(rowcnt+5), c('run_time')] = p1mdl$time
rowcnt = rowcnt + 6
# process Bayes P2
p2mdl =  readRDS(paste0(RESULTS_DIR, "TripleLink_Mdl/Bayes_p2/", seed, "_BayesModel_p2.rda"))
p2sum = summary(p2mdl$fit)
results_triple[rowcnt:(rowcnt+5),c('est', 'ts_se')] = p2sum$statistics[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'theta[3]', 'sigma'),c('Mean', 'Time-series SE')]
results_triple[rowcnt:(rowcnt+5),c('quantile.1', 'quantile.2','quantile.3','quantile.4','quantile.5')] = p2sum$quantiles[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'theta[3]', 'sigma'),]
results_triple[rowcnt:(rowcnt+5), c('neff')] = effectiveSize(p2mdl$fit)[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'theta[3]', 'sigma')]
results_triple[rowcnt:(rowcnt+5), c('rhat')] = gelman.diag(p2mdl$fit)$psrf[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'theta[3]', 'sigma'),1]
results_triple[rowcnt:(rowcnt+5), c('run_time')] = p2mdl$time
rowcnt = rowcnt + 6
# process Bayes P2
p3mdl =  readRDS(paste0(RESULTS_DIR, "TripleLink_Mdl/Bayes_p3/", seed, "_BayesModel_p3.rda"))
p3sum = summary(p3mdl$fit)
results_triple[rowcnt:(rowcnt+5),c('est', 'ts_se')] = p3sum$statistics[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'theta[3]', 'sigma'),c('Mean', 'Time-series SE')]
results_triple[rowcnt:(rowcnt+5),c('quantile.1', 'quantile.2','quantile.3','quantile.4','quantile.5')] = p3sum$quantiles[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'theta[3]', 'sigma'),]
results_triple[rowcnt:(rowcnt+5), c('neff')] = effectiveSize(p3mdl$fit)[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'theta[3]', 'sigma')]
results_triple[rowcnt:(rowcnt+5), c('rhat')] = gelman.diag(p3mdl$fit)$psrf[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'theta[3]', 'sigma'),1]
results_triple[rowcnt:(rowcnt+5), c('run_time')] = p3mdl$time
rowcnt = rowcnt + 6
# process Bayes P4
p4mdl =  readRDS(paste0(RESULTS_DIR, "TripleLink_Mdl/Bayes_p4/", seed, "_BayesModel_p4.rda"))
p4sum = summary(p4mdl$fit)
results_triple[rowcnt:(rowcnt+5),c('est', 'ts_se')] = p4sum$statistics[c('r[1]', 'r[2]','theta[1]', 'theta[2]', 'theta[3]', 'sigma'),c('Mean', 'Time-series SE')]
results_triple[rowcnt:(rowcnt+5),c('quantile.1', 'quantile.2','quantile.3','quantile.4','quantile.5')] = p4sum$quantiles[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'theta[3]', 'sigma'),]
results_triple[rowcnt:(rowcnt+5), c('neff')] = effectiveSize(p4mdl$fit)[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'theta[3]','sigma')]
results_triple[rowcnt:(rowcnt+5), c('rhat')] = gelman.diag(p4mdl$fit)$psrf[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'theta[3]','sigma'),1]
results_triple[rowcnt:(rowcnt+5), c('run_time')] = p4mdl$time
rowcnt = rowcnt + 6
# process Bayes P5
p5mdl =  readRDS(paste0(RESULTS_DIR, "TripleLink_Mdl/Bayes_p5/", seed, "_BayesModel_p5.rda"))
p5sum = summary(p5mdl$fit)
results_triple[rowcnt:(rowcnt+5),c('est', 'ts_se')] = p5sum$statistics[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'theta[3]', 'sigma'),c('Mean', 'Time-series SE')]
results_triple[rowcnt:(rowcnt+5),c('quantile.1', 'quantile.2','quantile.3','quantile.4','quantile.5')] = p5sum$quantiles[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'theta[3]', 'sigma'),]
results_triple[rowcnt:(rowcnt+5), c('neff')] = effectiveSize(p5mdl$fit)[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'theta[3]', 'sigma')]
results_triple[rowcnt:(rowcnt+5), c('rhat')] = gelman.diag(p5mdl$fit)$psrf[c('r[1]', 'r[2]', 'theta[1]', 'theta[2]', 'theta[3]', 'sigma'),1]
results_triple[rowcnt:(rowcnt+5), c('run_time')] = p5mdl$time
rowcnt = rowcnt + 6
}
saveRDS(results_triple, file = paste0(RESULTS_DIR, 'results/results_triple_', format(Sys.time(), "%d%m%Y"),".rda"))
################################################################################
# Combine and save
################################################################################
print("Combing files")
results_single = readRDS(paste0(RESULTS_DIR,"results/", "results_single_29032021.rda"))
results_double = readRDS(paste0(RESULTS_DIR, "results/", "results_double_29032021.rda"))
results_triple= readRDS(paste0(RESULTS_DIR, "results/", "results_triple_31032021.rda"))
results = rbind(results_single, results_double, results_triple)
print("Saving Results...")
saveRDS(results, file = paste0(RESULTS_DIR, 'results/results_', format(Sys.time(), "%d%m%Y"),".rda"))
write.table(results, file = paste0(RESULTS_DIR, 'results/results_', format(Sys.time(), "%d%m%Y"),".csv"), sep = ',', col.names = TRUE, row.names = FALSE)
print("Complete!")
saveRDS(results, file = paste0(RESULTS_DIR, 'results/results_', format(Sys.time(), "%d%m%Y"),".rda"))
write.table(results, file = paste0(RESULTS_DIR, 'results/results_', format(Sys.time(), "%d%m%Y"),".csv"), sep = ',', col.names = TRUE, row.names = FALSE)
print("Complete!")
saveRDS(results_triple, file = paste0(RESULTS_DIR, 'results/results_triple_', format(Sys.time(), "%d%m%Y"),".rda"))
saveRDS(results_double, file = paste0(RESULTS_DIR, 'results/results_double_', format(Sys.time(), "%d%m%Y"),".rda"))
saveRDS(results_single, file = paste0(RESULTS_DIR, 'results/results_single_', format(Sys.time(), "%d%m%Y"),".rda"))
View(results)
738+293+96+351+161+57+79+290+1307+148
25*.33333
25*.24
2+1.5+4.5+4+8
25*.5
2+1.5+4.5+4+10
34-22
7+17.5+10+15
44-5
15+9
31.5 + (2*6.75)
temp = runif(10000,0,1)
plot(density(temp))
plot(density(log(temp)))
temp = runif(1000000,0,10)
plot(density(temp))
plot(density(log(temp)))
temp = runif(1000000,0,10)
plot(density(temp))
plot(density(log(temp)))
########################### BayesKin ###########################
## Bayesian estimates of rigid body kinematics
## Andy Pohl
## UofC - Faculty of Kinesiology
## Written by: Andy Pohl
## UofC - Faculty of Kinesiology
## June-Dec 2020
## Revision 1: May 2020
################################################################
##################### SupplementE.r  ###################
## Performs additional analysis examining the robustness of Bayesian models to
## increases in measurement noise
################################################################
## Preliminaries
rm(list = ls())
WORKING_DIR = "." # Replace with appropriate location of working directory on local PC
SAVE_MDL = TRUE # assume save
INIT_TYPE = 'true_vals' # either 'true_vals', 'ls_est', 'random
NITS = 1000 # number of iterations.
setwd(WORKING_DIR)
# External libraries
library('dplyr')
library('latex2exp')
source('./library.r') # Retrieve function library
set.seed(1)  # Set seed for reproducibility
########################### Section A  #########################
## Specify simulation parameters
################################################################
## 1) Specify parameters
n.links = 1                 # Number of links.
seg.length = c(0.45)        # Length of segment specified in m. NB: Pataky pg 2.
r_true = c(0.07, 0.03)      # Origin location in m.
theta_true = c(-55)         # Rotation angle in deg. NB: specified to avoid 0/360 issue
# and mirroring solutions.
sigma_true = c(0.1, 1.5, 5, 10, 20,40)*(1/1000) # Measurement Noise in m
links = list(gen_link(seg.length = seg.length[1],
plate.center = 0.7*seg.length[1])) # Link geometry
## Preliminaries
rm(list = ls())
WORKING_DIR = "/media/data/ActiveProjects/P01_BayesianKinematics/PublishedCode/BayesKin/src/SupplementE" # Replace with appropriate location of working directory on local PC
SAVE_MDL = TRUE # assume save
INIT_TYPE = 'true_vals' # either 'true_vals', 'ls_est', 'random
NITS = 1000 # number of iterations.
setwd(WORKING_DIR)
# External libraries
library('dplyr')
library('latex2exp')
source('./library.r') # Retrieve function library
set.seed(1)  # Set seed for reproducibility
## 1) Specify parameters
n.links = 1                 # Number of links.
seg.length = c(0.45)        # Length of segment specified in m. NB: Pataky pg 2.
r_true = c(0.07, 0.03)      # Origin location in m.
theta_true = c(-55)         # Rotation angle in deg. NB: specified to avoid 0/360 issue
# and mirroring solutions.
sigma_true = c(0.1, 1.5, 5, 10, 20,40)*(1/1000) # Measurement Noise in m
links = list(gen_link(seg.length = seg.length[1],
plate.center = 0.7*seg.length[1])) # Link geometry
loadRDS('./DeltaVarResults.rds')
readRDS('./DeltaVarResults.rds')
results = readRDS('./DeltaVarResults.rds')
########################### Section C  #########################
## Process results and generate figures
################################################################
models = c('LS', 'Bayes Vague 1', "Bayes Vague 2",
'Bayes Weakly Informative', 'Bayes Informative')
abs_error = matrix(NA, nrow = length(sigma_true)*length(models)*4, ncol = 6)
abs_error = data.frame(abs_error)
names(abs_error) = c('sigma', 'Model', 'Parameter', 'lwr', 'med', 'upr')
perf = matrix(NA, nrow = 3*length(sigma_true)*length(models), ncol = 4)
perf = data.frame(perf)
names(perf) = c('sigma', 'Model', 'Parameter', 'Perf')
row_idx = 1
row_idx2 = 1
for(i in 1:length(sigma_true)){
sigma_result = results[results[,1]==sigma_true[i],]
for(j in 1:length(models)){ # Summarize abs error of each model
mdl_result = sigma_result[sigma_result[,2] == j,]
abs_error[row_idx,1] = unique(mdl_result[,1])
abs_error[row_idx,2] = unique(mdl_result[,2])
abs_error[row_idx,3] = 'rx'
abs_error[row_idx, 4:6] = quantile(abs(mdl_result[,4] - r_true[1]), probs = c(0.025, 0.5, 0.975))*1000
row_idx = row_idx+1
abs_error[row_idx,1] = unique(mdl_result[,1])
abs_error[row_idx,2] = unique(mdl_result[,2])
abs_error[row_idx,3] = 'ry'
abs_error[row_idx, 4:6] = quantile(abs(mdl_result[,5] - r_true[2]), probs = c(0.025, 0.5, 0.975))*1000
row_idx = row_idx+1
abs_error[row_idx,1] = unique(mdl_result[,1])
abs_error[row_idx,2] = unique(mdl_result[,2])
abs_error[row_idx,3] = 'theta1'
abs_error[row_idx, 4:6] = quantile(abs(mdl_result[,6] - theta_true[1]), probs = c(0.025, 0.5, 0.975))
row_idx = row_idx+1
abs_error[row_idx,1] = unique(mdl_result[,1])
abs_error[row_idx,2] = unique(mdl_result[,2])
abs_error[row_idx,3] = 'sigma'
abs_error[row_idx, 4:6] = quantile(abs(mdl_result[,7] - sigma_true[i]), probs = c(0.025, 0.5, 0.975))*1000
row_idx = row_idx +1
if(j >=2){ # Compute performance of Bayes vs LS.
perf[row_idx2,1] = unique(mdl_result[,1])
perf[row_idx2,2] = unique(mdl_result[,2])
perf[row_idx2,3] = 'rx'
perf[row_idx2,4] = mean(abs(mdl_result[,4] - true_vals$r_true[1]) < abs(sigma_result[sigma_result[,2] == 1,4] - true_vals$r_true[1]))
row_idx2 = row_idx2 +1
perf[row_idx2,1] = unique(mdl_result[,1])
perf[row_idx2,2] = unique(mdl_result[,2])
perf[row_idx2,3] = 'ry'
perf[row_idx2,4] = mean(abs(mdl_result[,5] - true_vals$r_true[2]) < abs(sigma_result[sigma_result[,2] == 1,5] - true_vals$r_true[2]))
row_idx2 = row_idx2 +1
perf[row_idx2,1] = unique(mdl_result[,1])
perf[row_idx2,2] = unique(mdl_result[,2])
perf[row_idx2,3] = 'theta1'
perf[row_idx2,4] = mean(abs(mdl_result[,6] - true_vals$theta_true[1]) < abs(sigma_result[sigma_result[,2] == 1,6] - true_vals$theta_true[1]))
row_idx2 = row_idx2 +1
perf[row_idx2,1] = unique(mdl_result[,1])
perf[row_idx2,2] = unique(mdl_result[,2])
perf[row_idx2,3] = 'sigma'
perf[row_idx2,4] = mean(abs(mdl_result[,7] - sigma_true[i]) < abs(sigma_result[sigma_result[,2] == 1,7] - sigma_true[i]))
row_idx2 = row_idx2 +1
}
}
}
########################### Section C  #########################
## Process results and generate figures
################################################################
models = c('LS', 'Bayes Vague 1', "Bayes Vague 2",
'Bayes Weakly Informative', 'Bayes Informative')
abs_error = matrix(NA, nrow = length(sigma_true)*length(models)*4, ncol = 6)
abs_error = data.frame(abs_error)
names(abs_error) = c('sigma', 'Model', 'Parameter', 'lwr', 'med', 'upr')
perf = matrix(NA, nrow = 3*length(sigma_true)*length(models), ncol = 4)
perf = data.frame(perf)
names(perf) = c('sigma', 'Model', 'Parameter', 'Perf')
row_idx = 1
row_idx2 = 1
for(i in 1:length(sigma_true)){
sigma_result = results[results[,1]==sigma_true[i],]
for(j in 1:length(models)){ # Summarize abs error of each model
mdl_result = sigma_result[sigma_result[,2] == j,]
abs_error[row_idx,1] = unique(mdl_result[,1])
abs_error[row_idx,2] = unique(mdl_result[,2])
abs_error[row_idx,3] = 'rx'
abs_error[row_idx, 4:6] = quantile(abs(mdl_result[,4] - r_true[1]), probs = c(0.025, 0.5, 0.975))*1000
row_idx = row_idx+1
abs_error[row_idx,1] = unique(mdl_result[,1])
abs_error[row_idx,2] = unique(mdl_result[,2])
abs_error[row_idx,3] = 'ry'
abs_error[row_idx, 4:6] = quantile(abs(mdl_result[,5] - r_true[2]), probs = c(0.025, 0.5, 0.975))*1000
row_idx = row_idx+1
abs_error[row_idx,1] = unique(mdl_result[,1])
abs_error[row_idx,2] = unique(mdl_result[,2])
abs_error[row_idx,3] = 'theta1'
abs_error[row_idx, 4:6] = quantile(abs(mdl_result[,6] - theta_true[1]), probs = c(0.025, 0.5, 0.975))
row_idx = row_idx+1
abs_error[row_idx,1] = unique(mdl_result[,1])
abs_error[row_idx,2] = unique(mdl_result[,2])
abs_error[row_idx,3] = 'sigma'
abs_error[row_idx, 4:6] = quantile(abs(mdl_result[,7] - sigma_true[i]), probs = c(0.025, 0.5, 0.975))*1000
row_idx = row_idx +1
if(j >=2){ # Compute performance of Bayes vs LS.
perf[row_idx2,1] = unique(mdl_result[,1])
perf[row_idx2,2] = unique(mdl_result[,2])
perf[row_idx2,3] = 'rx'
perf[row_idx2,4] = mean(abs(mdl_result[,4] - r_true[1]) < abs(sigma_result[sigma_result[,2] == 1,4] - r_true[1]))
row_idx2 = row_idx2 +1
perf[row_idx2,1] = unique(mdl_result[,1])
perf[row_idx2,2] = unique(mdl_result[,2])
perf[row_idx2,3] = 'ry'
perf[row_idx2,4] = mean(abs(mdl_result[,5] - r_true[2]) < abs(sigma_result[sigma_result[,2] == 1,5] - r_true[2]))
row_idx2 = row_idx2 +1
perf[row_idx2,1] = unique(mdl_result[,1])
perf[row_idx2,2] = unique(mdl_result[,2])
perf[row_idx2,3] = 'theta1'
perf[row_idx2,4] = mean(abs(mdl_result[,6] - theta_true[1]) < abs(sigma_result[sigma_result[,2] == 1,6] - theta_true[1]))
row_idx2 = row_idx2 +1
perf[row_idx2,1] = unique(mdl_result[,1])
perf[row_idx2,2] = unique(mdl_result[,2])
perf[row_idx2,3] = 'sigma'
perf[row_idx2,4] = mean(abs(mdl_result[,7] - sigma_true[i]) < abs(sigma_result[sigma_result[,2] == 1,7] - sigma_true[i]))
row_idx2 = row_idx2 +1
}
}
}
abs_error$sigma = abs_error$sigma*1000
perf$sigma = perf$sigma*1000
# Color scheme
colors = list(grey = rgb(97/255, 97/255,97/255, 0.2),
orange = rgb(241/255, 136/255,5/255, 1),
blue = rgb(18/255, 78/255,120/255,  0.2),
light_blue = rgb(93/255, 173/255,226/255,  0.2),
red = rgb(162/255, 0/255,33/255, 0.2),
green = rgb(76/255, 159/255, 112/255, 0.2),
purple = rgb(217/255, 187/255, 249/255, 0.2),
pink = rgb(217/255, 3/255, 104/255, 0.2))
colors2 = list(grey = rgb(97/255, 97/255,97/255, 0.2),
orange = rgb(241/255, 136/255,5/255, 1),
blue = rgb(18/255, 78/255,120/255, 1),
light_blue = rgb(93/255, 173/255,226/255,  1),
red = rgb(162/255, 0/255,33/255, 1),
green = rgb(76/255, 159/255, 112/255, 1),
purple = rgb(217/255, 187/255, 249/255, 1),
pink = rgb(217/255, 3/255, 104/255, 1))
point_cols = list(colors$pink, colors$blue,colors$light_blue, colors$purple,colors$green)
point_cols2 = list(colors2$pink, colors2$blue,colors2$light_blue, colors2$purple,colors2$green)
ylabs = c(TeX("Absolute Error $\\hat{r}_x \\, (mm)$"), TeX("Absolute Error $\\hat{r}_y \\, (mm)$"), TeX("Absolute Error $\\hat{\\theta}_1 \\, (deg)$"), TeX("Absolute Error $\\hat{\\sigma} \\, (mm)$"))
titles = c(TeX("$r_x$"), TeX("$r_y$"), TeX('$\\theta_1'), TeX("$\\sigma$"))
titles = c("(a)","(b)",'(c)',"(d)")
parameters = c('rx', 'ry', 'theta1', 'sigma')
ylims = list(c(0, 250), c(0,250), c(0, 60), c(0, 40))
par(mfrow=c(1,4))
for(j in 1:4){
for(i in 1:5){
parm_abs_error = abs_error %>% filter(Parameter ==parameters[j])
mdl_abs_error = parm_abs_error %>% filter(Model ==i)
jitter = (2-(5-i)) * 0.05*mdl_abs_error[,1]
plot_col2 = point_cols2[[i]]
plot_col1 = point_cols[[i]]
if(i ==1){
plot(mdl_abs_error$sigma + jitter, mdl_abs_error$med,type = 'b', pch = 16, col =plot_col2,
xlab = TeX("Noise Level: $\\sigma \\, (mm)$"), ylab = ylabs[j], bty='n',
xlim = c(-0.02, 50), ylim = ylims[[j]],
xaxt ='n')
segments(x0=mdl_abs_error$sigma + jitter, y0 =  mdl_abs_error$lwr, x1 = mdl_abs_error$sigma + jitter, y1 = mdl_abs_error$upr, lty = 3, col = plot_col2)
axis(side = 1, at = (sigma_true*1000), as.character(sigma_true*1000), las=2)
}else{
lines(mdl_abs_error$sigma + jitter, mdl_abs_error$med,type = 'b', pch = 16, col =plot_col2)
segments(x0=mdl_abs_error$sigma + jitter, y0 =  mdl_abs_error$lwr, x1 = mdl_abs_error$sigma + jitter, y1 = mdl_abs_error$upr, lty = 3, col = plot_col2)
}
title(titles[j], font.main=1)
}
}
legend(0, 40, legend = models[1:5],
col = c(point_cols2[[1]],point_cols2[[2]], point_cols2[[3]], point_cols2[[4]], point_cols2[[5]]),
lty = 1, bty='n')
titles = c(TeX("(a) \t $r_x$"),TeX("(b) \t $r_y$"),TeX('(c) \t $\\theta_1$'),TeX("(d) \t $\\sigma$"))
par(mfrow=c(1,4))
for(j in 1:4){
for(i in 2:5){
parm_perf = perf %>% filter(Parameter ==parameters[j])
mdl_parm_perf = parm_perf %>% filter(Model ==i)
jitter = 0
plot_col2 = point_cols2[[i]]
if(i ==2){
plot(mdl_parm_perf$sigma + jitter, mdl_parm_perf$Perf,type = 'b', pch = 16, col =plot_col2,
xlab = TeX("Noise Level: $\\sigma \\, (mm)$"), ylab = "Proportion of Simulations", bty='n',
xlim = c(-0.02, 50), ylim = c(0.4,1),
xaxt ='n')
axis(side = 1, at = (sigma_true*1000), as.character(sigma_true*1000), las=2)
}else{
lines(mdl_parm_perf$sigma + jitter, mdl_parm_perf$Perf,type = 'b', pch = 16, col =plot_col2)
}
title(titles[j], main.font=1)
}
}
legend(0, 0.5, legend = models[2:5],
col = c(point_cols2[[2]], point_cols2[[3]], point_cols2[[4]], point_cols2[[5]]),
lty = 1, bty='n')
## -----------------------------------------------------------------------------
# Figure 3 Scatter Plot of LS estimator vs Bayes estimator
## -----------------------------------------------------------------------------
axis_lims = list(c(-0.2*1000, 0.5*1000), c(-0.5*1000, 0.2*1000), c(-150,100), c(0*1000, 0.12*1000))
true_vals_vec = c(r_true*1000, theta_true, sigma_true[6]*1000)
results_40 = results[results[,1]==40/1000,] # This can be changed to explore other noise levels
results_40[,c(4,5,7)] = results_40[,c(4,5,7)]*1000
ylabs = c("Vague 1", "Vague 2", "Weakly Informative", "Informative")
titles = c(TeX("$r_x \\, (mm)$"), TeX("$r_y \\, (mm)$"), TeX('$\\theta_1 \\, (deg)'), TeX("$\\sigma \\, (mm)$"))
par(mfrow=c(4,4), mai = c(0.6, 0.6, 0.0, 0))
for(i in 2:5){
for(j in 1:4){
ls_result = results_40[results_40[,2]==1, 3+j]
mdl_result = results_40[results_40[,2]==i, 3+j]
b_ls = sqrt((mdl_result-true_vals_vec[j])^2) - sqrt((ls_result - true_vals_vec[j])^2)
b_ls = ifelse(b_ls<0, 1,2)
cols = list(rgb(52/255, 152/255, 219/255, 0.2),
colors$pink)
mycol = rep("", length(b_ls))
for(ii in 1:length(b_ls)){
mycol[ii] = cols[[b_ls[ii]]]
}
if(j ==1 & i ==5){
plot(ls_result, mdl_result, pch = 16, col = mycol,
#asp = 1,
xlim = axis_lims[[j]], ylim = axis_lims[[j]],
xlab = "LS est",
ylab = ylabs[i-1],
bty='n')
}else if (j >1 & i ==5 ){
plot(ls_result, mdl_result, pch = 16, col = mycol,
#asp = 1,
xlim = axis_lims[[j]], ylim = axis_lims[[j]],
xlab = "LS est",
ylab = NA,
bty='n')
}else if(j==1 & i < 5){
plot(ls_result, mdl_result, pch = 16, col = mycol,
#asp = 1,
xlim = axis_lims[[j]], ylim = axis_lims[[j]],
xlab = NA,
ylab = ylabs[i-1],
bty='n')
}else{
plot(ls_result, mdl_result, pch = 16, col = mycol,
#asp = 1,
xlim = axis_lims[[j]], ylim = axis_lims[[j]],
xlab = NA, ylab = NA,
bty='n')
}
if(i ==2){
title(titles[j], line =-1)
}
abline(0,1, col = colors$orange)
points(true_vals_vec[j],true_vals_vec[j], pch=18, cex = 2,col = colors2$orange)
}
}
